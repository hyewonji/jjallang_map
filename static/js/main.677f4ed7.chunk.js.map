{"version":3,"sources":["components/KakaoMap.jsx","components/Button.jsx","App.js","reportWebVitals.js","index.js"],"names":["kakao","styled","div","window","KakaoMap","useState","latitude","longitude","coords","setCoords","setLocation","useEffect","navigator","geolocation","getCurrentPosition","data","console","log","container","document","getElementById","options","center","maps","LatLng","level","map","Map","geocoder","services","Places","Geocoder","InfoWindow","zIndex","callback","coord2RegionCode","getLng","getLat","searchAddrFromCoords","getCenter","result","status","Status","OK","infoDiv","i","length","region_type","innerHTML","address_name","address","split","id","style","width","height","className","backgroundColor","position","top","left","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8LAGQA,GCAaC,IAAOC,IAAV,gPDAAC,OAAVH,OAyHOI,MAvHf,WACI,MAA4BC,mBAAS,CACjCC,SAAU,UACVC,UAAW,aAFf,mBAAOC,EAAP,KAAeC,EAAf,KAIA,EAAgCJ,mBAAS,IAAzC,mBAAiBK,GAAjB,WA8FA,OA3FAC,qBAAU,WACNC,UAAUC,YAAYC,oBAAmB,SAACC,GACtCN,EAAU,2BACHD,GADE,IAELF,SAAUS,EAAKP,OAAOF,SACtBC,UAAWQ,EAAKP,OAAOD,kBAGhC,IAGHI,qBAAU,WACNK,QAAQC,IAAIjB,GACZ,IAAMkB,EAAYC,SAASC,eAAe,OACpCC,EAAU,CACZC,OAAQ,IAAItB,EAAMuB,KAAKC,OAAOhB,EAAOF,SAAUE,EAAOD,WACtDkB,MAAO,GAELC,EAAM,IAAI1B,EAAMuB,KAAKI,IAAIT,EAAWG,GAEpCO,GADK,IAAI5B,EAAMuB,KAAKM,SAASC,OAClB,IAAI9B,EAAMuB,KAAKM,SAASE,UACtB,IAAI/B,EAAMuB,KAAKS,WAAW,CAAEC,OAAQ,KAgBvD,SAA8BzB,EAAQ0B,GAClCN,EAASO,iBACL3B,EAAO4B,SACP5B,EAAO6B,SACPH,GAlBRI,CAAqBZ,EAAIa,aAuBzB,SAA2BC,EAAQC,GAC/B,GAAIA,IAAWzC,EAAMuB,KAAKM,SAASa,OAAOC,GAEtC,IADA,IAAMC,EAAUzB,SAASC,eAAe,cAC/ByB,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,IAE/B,GAA8B,MAA1BL,EAAOK,GAAGE,YAAqB,CAC/BH,EAAQI,UAAYR,EAAOK,GAAGI,aAC9B,IAAMC,EAAUV,EAAOK,GAAGI,aAAaE,MAAM,KAC7CzC,EAAYwC,EAAQ,IACpB,YAkCjB,CAAC1C,IAGA,qCACI,qBAAK4C,GAAG,MAAMC,MAAO,CAAEC,MAAO,QAASC,OAAQ,WAC/C,sBACIC,UAAU,QACVH,MAAO,CACHI,gBAAiB,MACjBC,SAAU,WACVC,IAAK,EACLC,KAAM,EACN3B,OAAQ,IAPhB,UAUI,sBAAMuB,UAAU,QAAhB,8FACA,sBAAMJ,GAAG,sBEzGVS,MARf,WACI,OACI,qBAAKL,UAAU,MAAf,SACI,cAAC,EAAD,OCIGM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJtD,SAASC,eAAe,SAG5B0C,M","file":"static/js/main.677f4ed7.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nconst { kakao } = window;\r\n\r\nfunction KakaoMap() {\r\n    const [coords, setCoords] = useState({\r\n        latitude: 33.450701,\r\n        longitude: 126.570667,\r\n    });\r\n    const [location, setLocation] = useState(\"\");\r\n\r\n    /* 현재 위치 받아오기 */\r\n    useEffect(() => {\r\n        navigator.geolocation.getCurrentPosition((data) => {\r\n            setCoords({\r\n                ...coords,\r\n                latitude: data.coords.latitude,\r\n                longitude: data.coords.longitude,\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    /* Kakao 지도 API 활용 */\r\n    useEffect(() => {\r\n        console.log(kakao);\r\n        const container = document.getElementById(\"map\");\r\n        const options = {\r\n            center: new kakao.maps.LatLng(coords.latitude, coords.longitude),\r\n            level: 3,\r\n        };\r\n        const map = new kakao.maps.Map(container, options); // 지도 생성\r\n        const ps = new kakao.maps.services.Places(); // 장소 검색 객체 생성\r\n        const geocoder = new kakao.maps.services.Geocoder(); // 주소-좌표 변환 객체 생성\r\n        const infowindow = new kakao.maps.InfoWindow({ zIndex: 1 }); // 클릭한 위치에 대한 주소 표시\r\n\r\n        searchAddrFromCoords(map.getCenter(), displayCenterInfo); //현재 지도 중심좌표 주소 표시\r\n        // ps.keywordSearch(`${location} 코인 노래방`, placesSearchCB); // 키워드로 장소 검색\r\n\r\n        // kakao.maps.event.addListener(map, \"dragend\", function () {\r\n        //     const center = map.getCenter();\r\n        //     console.log(center.La, center.Ma);\r\n        //     // setCoords({\r\n        //     //     ...coords,\r\n        //     //     latitude: center.La,\r\n        //     //     longitude: center.Ma,\r\n        //     // });\r\n        // });\r\n\r\n        // 좌표로 행정동 주소 정보를 표시하는 함수\r\n        function searchAddrFromCoords(coords, callback) {\r\n            geocoder.coord2RegionCode(\r\n                coords.getLng(),\r\n                coords.getLat(),\r\n                callback\r\n            );\r\n        }\r\n\r\n        // 지도 중심좌표에 대한 주소정보 표시하는 함수\r\n        function displayCenterInfo(result, status) {\r\n            if (status === kakao.maps.services.Status.OK) {\r\n                const infoDiv = document.getElementById(\"centerAddr\");\r\n                for (var i = 0; i < result.length; i++) {\r\n                    // 행정동의 region_type 값은 'H' 이므로\r\n                    if (result[i].region_type === \"H\") {\r\n                        infoDiv.innerHTML = result[i].address_name;\r\n                        const address = result[i].address_name.split(\" \");\r\n                        setLocation(address[2]);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // // 키워드 검색 완료 시 호출되는 콜백함수\r\n        // function placesSearchCB(data, status, pagination) {\r\n        //     if (status === kakao.maps.services.Status.OK) {\r\n        //         var bounds = new kakao.maps.LatLngBounds();\r\n\r\n        //         for (var i = 0; i < data.length; i++) {\r\n        //             displayMarker(data[i]);\r\n        //             bounds.extend(new kakao.maps.LatLng(data[i].y, data[i].x));\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        // // 지도에 마커 표시하는 함수\r\n        // function displayMarker(place) {\r\n        //     var marker = new kakao.maps.Marker({\r\n        //         map: map,\r\n        //         position: new kakao.maps.LatLng(place.y, place.x),\r\n        //     });\r\n\r\n        //     kakao.maps.event.addListener(marker, \"click\", function () {\r\n        //         infowindow.setContent(\r\n        //             '<div style=\"padding:5px;font-size:12px;\">' +\r\n        //                 place.place_name +\r\n        //                 \"</div>\"\r\n        //         );\r\n        //         infowindow.open(map, marker);\r\n        //     });\r\n        // }\r\n    }, [coords]);\r\n\r\n    return (\r\n        <>\r\n            <div id=\"map\" style={{ width: \"100vw\", height: \"100vh\" }} />\r\n            <div\r\n                className=\"hAddr\"\r\n                style={{\r\n                    backgroundColor: \"red\",\r\n                    position: \"absolute\",\r\n                    top: 0,\r\n                    left: 0,\r\n                    zIndex: 10,\r\n                }}\r\n            >\r\n                <span className=\"title\">지도중심기준 행정동 주소정보</span>\r\n                <span id=\"centerAddr\"></span>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default KakaoMap;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst SearchButton = styled.div`\r\n    position: absolute;\r\n    top: 20px;\r\n    right: 20px;\r\n    padding: 5px 10px;\r\n    z-index: 10;\r\n    border: solid 1px #828282;\r\n    color: #525252;\r\n    border-radius: 10px;\r\n    background-color: #fcfcfc;\r\n`;\r\n\r\nconst Button = ({ onClick }) => {\r\n    return <SearchButton onClick={onClick}>현 지도에서 검색</SearchButton>;\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport KakaoMap from \"./components/KakaoMap\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <KakaoMap />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}